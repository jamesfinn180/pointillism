{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","getGists","limit","state","allowFetch","setState","API_URL","gPage","fetch","method","cache","headers","etag","then","response","get","ok","json","status","Error","data","newGistData","push","gistData","catch","error","errorMessage","message","this","className","List","Component","useState","showAvatar","setShowAvatar","avaUrl","setAvaUrl","handleGistClicked","srcUrl","onScroll","e","target","clientHeight","scrollHeight","scrollTop","map","gist","i","fileNames","Object","keys","files","join","ListItem","avatarUrl","owner","avatar_url","ListItemLoading","Avatar","onClick","src","alt","onTransitionEnd","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7163237.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport './App.css';\n\n/**\n * Main component\n *\n * @state  {array}   gistData    Contains all objects fetched from Gist API. Updated on scroll of List\n * @state  {int}     gPage       Controls pagination of fetch request. Increments on every fetch request\n * @state  {string}  etag        Used as header in fetch request to ensure same data isn't downloaded twice\n * @state  {bool}    allowFetch  Throttles fetch request to prevent multiple fetchs being called on scroll\n *\n * @return {JSX} List\n */\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gistData: [],\n            gPage: 1,\n            etag: '',\n            allowFetch: true\n            // lastRequest: '2011-10-05T14:48:00.000Z'\n        }\n    }\n\n    componentDidMount() {\n        this.getGists(20);\n    }\n    \n    getGists = (limit=20) => {\n\n        if (this.state.allowFetch) {\n            // Prevent fetch from firing again until current fetch has resolved\n            this.setState({ allowFetch: false });\n            \n            const API_URL = `https://api.github.com/gists/public?page=${this.state.gPage}&per_page=${limit}`; //&since=${this.state.lastRequest}`;\n\n            fetch(API_URL,{\n                method: 'GET',\n                cache: 'default',\n                headers: {\n                    'Accept': 'application/vnd.github.v3+json',\n                    'If-None-Match': this.state.etag\n                }\n            })\n            .then(response => {\n                // Extract Header's etag for use in subsequent requests\n                const etag = response.headers.get('etag') || '';\n                this.setState({ etag });\n\n                if (response.ok) {\n                    // All good\n                    return response.json();\n                }\n                else if (response.status === 304) {\n                    // Nothing new so don't update\n                    return [];\n                }\n                else if (response.status === 403) {\n                    // Rate limit has been exceeded\n                    throw new Error('Rate limit exceeded. Try again in an hour: ' + response.status);\n                }\n                else {\n                    // Error occurred\n                    throw new Error('Response status = ' + response.status);\n                }\n            })\n            .then(data => {\n                // Concatenate new data into gistData\n                const newGistData = [];\n                newGistData.push(...this.state.gistData, ...data);\n\n                this.setState({\n                    allowFetch: true,\n                    gistData: newGistData,\n                    gPage: this.state.gPage + 1\n                    // lastRequest: new Date().toISOString()\n                });\n            })\n            .catch(error => {\n                const errorMessage = 'Sorry an error has occured: ' + (error.message || '');\n                // Output error message onto list\n                this.setState({\n                    allowFetch: true,\n                    gistData: [\n                        {\n                            'owner': {\n                                'avatar_url': 'https://upload.wikimedia.org/wikipedia/commons/3/34/ErrorMessage.png'\n                            },\n                            'files': {\n                                [errorMessage]: {}\n                            }\n                        }\n                    ]\n                });\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                <List gistData={this.state.gistData}\n                      allowFetch={this.state.allowFetch}  \n                      getGists={this.getGists} />\n            </div>\n        )\n    }\n}\n\n\n/**\n * A List containing all the data objects fetched from the Gist API.\n *\n * @param  {array}   gistData    Contains objects fetched from Gist API\n * @param  {bool}    allowFetch  True if fetch is allowed. False indicates fetch in progress\n * @param  {func()}  getGists()  Fetches Gist API and updates gistData\n *\n * @return {JSX} ListItems, Loading Icon and Big Avatar Image\n */\nfunction List({gistData, allowFetch, getGists}) {\n    // Using hooks to show/hide clicked gist Avatar\n    const [showAvatar, setShowAvatar] = useState(false);\n    const [avaUrl, setAvaUrl] = useState('');\n    \n    var scrollList = (e) => {\n        const { clientHeight, scrollHeight, scrollTop } = e.target;\n\n        // User has scrolled to bottom of content\n        if (scrollHeight - clientHeight <= scrollTop + 300) { // 300 pixel buffer from end\n            // Update gistData with new fetch\n            getGists(20);\n        }\n    }\n\n    var handleGistClicked = (srcUrl) => {\n        // Update big Avatar image src and display big Avatar on screen\n        setAvaUrl(srcUrl);\n        setShowAvatar(true);\n    }\n\n    return(\n        <div className='main' onScroll={scrollList}>\n            <ul className='list' >\n                {\n                    // Extract and concatenate all file names into string\n                    // Extract Avatar url from owner property\n                    gistData.map((gist, i) => {\n                        const fileNames = Object.keys(gist.files).join(' ');\n                        /*\n                        const fileNames = '';\n                        for (let f in gist.files) {\n                            fileNames += gist.files[f].filename + ' ';\n                        }\n                        */\n                        return (\n                            <ListItem key={i}\n                                      avatarUrl={gist.owner.avatar_url}\n                                      fileNames={fileNames}\n                                      handleGistClicked={handleGistClicked} />\n                        )\n                    })\n                }\n                {\n                    // Display loading icon if fetch is in progress\n                    (allowFetch) ? null : <ListItemLoading /> \n                }\n            </ul>\n            {/* Avatar is hidden off screen until ListItem is clicked*/}\n            <Avatar showAvatar={showAvatar} \n                    avaUrl={avaUrl}\n                    setShowAvatar={setShowAvatar} />\n        </div>\n    );\n}\n\n\n/**\n * A ListItem contianing the file name/s and avatar icon of a Gist.\n *\n * @param  {string}  avatarUrl    src of Gist Avatar image\n * @param  {string}  fileNames    All file names contained in Gist\n * @param  {func()}  handleGistClicked()   Updates big Avatar image src\n *\n * @return {JSX} An LI contianing an IMG and P\n */\nfunction ListItem({avatarUrl, fileNames, handleGistClicked}) {\n    return (\n        <li className='list__item'\n            onClick={() => handleGistClicked(avatarUrl)}>\n            <img className='list__item__avatar' \n                 src={avatarUrl} \n                 alt='User avatar' />\n            <p className='list__item__text'>{fileNames}</p>\n        </li>\n    )\n}\n\n\n/**\n * A ListItemLoading containing a loading gif\n *\n * @return {JSX} An LI contianing a loading gif IMG\n */\nfunction ListItemLoading() {\n    return (\n        <li className='list__item list__item--loading'>\n            <img className='list__item__loading-icon'\n                 src='https://i.gifer.com/ZZ5H.gif' \n                 alt='Loading icon' />\n        </li>\n    )\n}\n\n\n/**\n * Display the owner's Avatar in the centre of screen when list item clicked\n *\n * @param  {bool}    showAvatar      true to show Avatar image\n * @param  {string}  avaUrl          src of Avatar image\n * @param  {func()}  setShowAvatar() update showAvatar after image transition ends\n * \n * @return {JSX} An IMG\n */\nfunction Avatar({showAvatar, avaUrl, setShowAvatar}) {\n    return (\n        <img className={`large-icon ${showAvatar ? 'large-icon--reveal' : 'large-icon--hide'}`}\n             src={avaUrl} \n             alt='Owner avatar icon' \n             onTransitionEnd={() => setShowAvatar(false)} />\n    )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}